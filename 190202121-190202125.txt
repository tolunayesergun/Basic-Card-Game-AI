package Game;

import Game.Oyuncu;
import Game.Pokemon;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Bilgisayar extends Oyuncu {

    public Bilgisayar() {
        super(2, "Bilgisayar 1", 0);
    }

    public Bilgisayar(int oyuncuId, String oyuncuAdi, int skor) {
        super(oyuncuId, oyuncuAdi, skor);
    }

    public int _lastCardIndex;

    public int getLastCardIndex() {
        return this._lastCardIndex;
    }

    @Override
    Pokemon kartSec(Pokemon selectedCard) {
        Random rand = new Random();
        int index = 0;

        List<Pokemon> pokelist = new ArrayList();
        for (Pokemon poke : super.getKartList()) {
            if (poke.getKartKullanildimi() == false) {
                pokelist.add(poke);
            }
        }

        index = rand.nextInt(pokelist.size());
        Pokemon pokemon = pokelist.get(index);

        int tempCount = 0;
        for (Pokemon subPoke : super.getKartList()) {
            if (subPoke.getPokemonID() == pokemon.getPokemonID()) {
                break;
            }

            tempCount++;
        }

        this._lastCardIndex = tempCount;

        return pokemon;
    }
}


package Game;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;

public class GameBoard extends javax.swing.JFrame {

    public GameBoard() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jButton17 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        jButton25 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton20 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jButton18 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        isShowCards = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1340, 670));
        setPreferredSize(new java.awt.Dimension(1340, 670));
        setResizable(false);
        setSize(new java.awt.Dimension(1340, 670));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/area.png"))); // NOI18N
        jButton17.setBorder(null);
        jButton17.setOpaque(false);
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton17);
        jButton17.setBounds(650, 460, 119, 170);

        jButton24.setBackground(new java.awt.Color(255, 255, 255));
        jButton24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/closedcard.png"))); // NOI18N
        jButton24.setBorder(null);
        jButton24.setOpaque(false);
        getContentPane().add(jButton24);
        jButton24.setBounds(740, 240, 119, 170);

        jButton25.setBackground(new java.awt.Color(255, 255, 255));
        jButton25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/closedcard.png"))); // NOI18N
        jButton25.setBorder(null);
        jButton25.setOpaque(false);
        getContentPane().add(jButton25);
        jButton25.setBounds(540, 240, 119, 170);

        jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/area.png"))); // NOI18N
        jButton15.setBorder(null);
        jButton15.setOpaque(false);
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton15);
        jButton15.setBounds(530, 460, 119, 170);

        jButton16.setBackground(new java.awt.Color(255, 255, 255));
        jButton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/area.png"))); // NOI18N
        jButton16.setToolTipText("99");
        jButton16.setBorder(null);
        jButton16.setOpaque(false);
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton16);
        jButton16.setBounds(770, 460, 119, 170);

        jButton9.setBackground(new java.awt.Color(255, 255, 255));
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/area.png"))); // NOI18N
        jButton9.setToolTipText("99");
        jButton9.setBorder(null);
        jButton9.setOpaque(false);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton9);
        jButton9.setBounds(890, 460, 119, 170);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Oyuncu 1 : Kullanıcı ");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(1050, 550, 260, 50);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/area.png"))); // NOI18N
        jButton1.setToolTipText("");
        jButton1.setBorder(null);
        jButton1.setOpaque(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(410, 460, 119, 170);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Oyuncu 2 : Bilgisayar ");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(1050, 40, 290, 50);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Skor : 0");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(100, 500, 190, 80);

        jButton20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/area.png"))); // NOI18N
        jButton20.setBorder(null);
        jButton20.setOpaque(false);
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton20);
        jButton20.setBounds(540, 0, 119, 170);

        jButton23.setBackground(new java.awt.Color(255, 255, 255));
        jButton23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/area.png"))); // NOI18N
        jButton23.setToolTipText("99");
        jButton23.setBorder(null);
        jButton23.setOpaque(false);
        getContentPane().add(jButton23);
        jButton23.setBounds(900, 0, 119, 170);

        jButton22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/area.png"))); // NOI18N
        jButton22.setBorder(null);
        jButton22.setOpaque(false);
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton22);
        jButton22.setBounds(660, 0, 119, 170);

        jButton21.setBackground(new java.awt.Color(255, 255, 255));
        jButton21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/area.png"))); // NOI18N
        jButton21.setToolTipText("99");
        jButton21.setBorder(null);
        jButton21.setOpaque(false);
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton21);
        jButton21.setBounds(780, 0, 119, 170);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Skor : 0");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(100, 50, 180, 80);

        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setRows(5);
        jTextArea1.setBorder(null);
        jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextArea1.setFocusable(false);
        jTextArea1.setOpaque(false);
        getContentPane().add(jTextArea1);
        jTextArea1.setBounds(875, 260, 440, 150);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("ORTADAKİ KARTLAR");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(160, 220, 148, 17);

        jButton18.setBackground(new java.awt.Color(255, 255, 255));
        jButton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/area.png"))); // NOI18N
        jButton18.setBorder(null);
        jButton18.setOpaque(false);
        getContentPane().add(jButton18);
        jButton18.setBounds(540, 240, 119, 170);

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/area.png"))); // NOI18N
        jButton2.setBorder(null);
        jButton2.setOpaque(false);
        getContentPane().add(jButton2);
        jButton2.setBounds(740, 240, 119, 170);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/arena.png"))); // NOI18N
        getContentPane().add(jLabel3);
        jLabel3.setBounds(680, 240, 60, 190);

        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/area.png"))); // NOI18N
        jButton12.setBorder(null);
        jButton12.setOpaque(false);
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton12);
        jButton12.setBounds(370, 240, 119, 170);

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/area.png"))); // NOI18N
        jButton11.setBorder(null);
        jButton11.setOpaque(false);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton11);
        jButton11.setBounds(250, 240, 119, 170);

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/area.png"))); // NOI18N
        jButton8.setBorder(null);
        jButton8.setOpaque(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton8);
        jButton8.setBounds(130, 240, 119, 170);

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/area.png"))); // NOI18N
        jButton10.setBorder(null);
        jButton10.setOpaque(false);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton10);
        jButton10.setBounds(10, 240, 119, 170);

        jButton19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/area.png"))); // NOI18N
        jButton19.setBorder(null);
        jButton19.setOpaque(false);
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton19);
        jButton19.setBounds(420, 0, 120, 170);

        isShowCards.setBackground(new java.awt.Color(255, 255, 255));
        isShowCards.setForeground(new java.awt.Color(255, 255, 255));
        isShowCards.setText("Kartları Göster");
        isShowCards.setBorder(null);
        isShowCards.setOpaque(false);
        isShowCards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isShowCardsActionPerformed(evt);
            }
        });
        getContentPane().add(isShowCards);
        isShowCards.setBounds(10, 10, 140, 15);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/bdtext.png"))); // NOI18N
        getContentPane().add(jLabel4);
        jLabel4.setBounds(870, 240, 450, 170);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Ana Menüye Dön");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel5);
        jLabel5.setBounds(1210, 10, 120, 20);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/bg1.jpg"))); // NOI18N
        jLabel11.setText("jLabel11");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(0, 0, 1330, 630);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    int kart1, kart2, Roundp = 0, Roundc = 0, RoundF = 0;

    public void SetLeftArenaText(Game.Pokemon pokemon, int index) {
        //jButton18.setText("<html>" + pokemon.getPokemonAdi() + "<br /><br />" + "Güç : " + pokemon.hasarPuaniGoster() + "</html>");
        jButton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + pokemon.getPokemonAdi() + ".jpg")));

        jButton18.setToolTipText("" + index);
    }

    public void SetRightArenaText(Game.Pokemon pokemon, int index) {
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + pokemon.getPokemonAdi() + ".jpg")));
        jButton2.setToolTipText("" + index);

        switch (index) {
            case 0:
                jButton19.setEnabled(false);
                break;
            case 1:
                jButton20.setEnabled(false);
                break;
            case 2:
                jButton22.setEnabled(false);
                break;
            default:
                break;
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         

        if (Roundc == 0 && Roundp == 0) {
            jButton24.setVisible(true);
            jButton25.setVisible(true);
            jButton1.setEnabled(false);
            SetLeftArenaText(Gamer1.getKartList().get(0), 0);
            Gamer1.getKartList().get(0).setKartKullanildimi(true);

            Computer2Play(0);

            Roundp++;
        } else if (Roundc == 1 && Roundp == 1) {

            jButton24.setVisible(true);
            jButton25.setVisible(true);

            jButton1.setEnabled(false);
            SetLeftArenaText(Gamer1.getKartList().get(0), 0);
            Gamer1.getKartList().get(0).setKartKullanildimi(true);

            Computer2Play(0);

            Roundp++;
        } else if (Roundc == 2 && Roundp == 2) {

            jButton24.setVisible(true);
            jButton25.setVisible(true);
            jButton1.setEnabled(false);
            SetLeftArenaText(Gamer1.getKartList().get(0), 0);
            Gamer1.getKartList().get(0).setKartKullanildimi(true);

            Computer2Play(0);

            Roundc++;
        } else if (Roundc < 5 && Roundc > 2 && Roundp == 2) {
            jButton24.setVisible(true);
            jButton25.setVisible(true);
            jButton1.setEnabled(false);
            SetLeftArenaText(Gamer1.getKartList().get(0), 0);
            Gamer1.getKartList().get(0).setKartKullanildimi(true);
            Computer2Play(0);

            Roundc++;

        } else {
            JOptionPane.showMessageDialog(null, "Öncelikle Ortadan Kart Seçmelisiniz", "Uyarı !", 1);
        }


    }                                        

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {                                          

        if (Roundc == 0 && Roundp == 0) {
            jButton24.setVisible(true);
            jButton25.setVisible(true);
            jButton15.setEnabled(false);
            SetLeftArenaText(Gamer1.getKartList().get(1), 1);
            Gamer1.getKartList().get(1).setKartKullanildimi(true);
            Computer2Play(1);

            Roundp++;
        } else if (Roundc == 1 && Roundp == 1) {
            jButton24.setVisible(true);
            jButton25.setVisible(true);
            jButton15.setEnabled(false);
            SetLeftArenaText(Gamer1.getKartList().get(1), 1);
            Gamer1.getKartList().get(1).setKartKullanildimi(true);
            Computer2Play(1);

            Roundp++;
        } else if (Roundc == 2 && Roundp == 2) {
            jButton24.setVisible(true);
            jButton25.setVisible(true);
            jButton15.setEnabled(false);
            SetLeftArenaText(Gamer1.getKartList().get(1), 1);
            Gamer1.getKartList().get(1).setKartKullanildimi(true);

            Computer2Play(1);

            Roundc++;
        } else if (Roundc < 5 && Roundc > 2 && Roundp == 2) {
            jButton24.setVisible(true);
            jButton25.setVisible(true);
            jButton15.setEnabled(false);
            SetLeftArenaText(Gamer1.getKartList().get(1), 1);
            Gamer1.getKartList().get(1).setKartKullanildimi(true);

            Computer2Play(1);

            Roundc++;

        } else {
            JOptionPane.showMessageDialog(null, "Öncelikle Ortadan Kart Seçmelisiniz", "Uyarı !", 1);
        }


    }                                         

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {                                          

        if (Roundp > 0) {

            if (Roundc == 0 && Roundp == 0) {
                jButton24.setVisible(true);
                jButton25.setVisible(true);
                jButton16.setEnabled(false);
                SetLeftArenaText(CommonCards.get(kart1), 1);
                CommonCards.get(kart1).setKartKullanildimi(true);

                Computer2PlayAfterCommon(kart1);

                Roundp++;
            } else if (Roundc == 1 && Roundp == 1) {
                jButton24.setVisible(true);
                jButton25.setVisible(true);
                jButton16.setEnabled(false);
                SetLeftArenaText(CommonCards.get(kart1), 1);
                CommonCards.get(kart1).setKartKullanildimi(true);

                Computer2PlayAfterCommon(kart1);

                Roundp++;
            } else if (Roundc == 2 && Roundp == 2) {
                jButton24.setVisible(true);
                jButton25.setVisible(true);
                jButton16.setEnabled(false);
                SetLeftArenaText(CommonCards.get(kart1), 1);
                CommonCards.get(kart1).setKartKullanildimi(true);

                Computer2PlayAfterCommon(kart1);

                Roundc++;
            } else if (Roundc < 5 && Roundc > 2 && Roundp == 2) {
                jButton24.setVisible(true);
                jButton25.setVisible(true);
                jButton16.setEnabled(false);
                SetLeftArenaText(CommonCards.get(kart1), 1);
                CommonCards.get(kart1).setKartKullanildimi(true);

                Computer2PlayAfterCommon(kart1);

                Roundc++;

            } else {
                JOptionPane.showMessageDialog(null, "Öncelikle Ortadan Kart Seçmelisiniz", "Uyarı !", 1);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Öncelikle Ortadan Kart Seçmelisiniz", "Uyarı !", 1);
        }
    }

    /* jButton18.setText("<html>" + CommonCards.get(index).getPokemonAdi() + "<br /><br />" + "Güç : " + CommonCards.get(index).hasarPuaniGoster() + "</html>");
        //   jButton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/"+CommonCards.get(index).getPokemonAdi()+".jpg"))); 
        //  jButton18.setToolTipText(""+index);
        //  CommonCards.get(index).setKartKullanildimi(true);
        //   Computer2PlayAfterCommon(index);
        //  DisableCommonCard(CommonCards.get(index).getPokemonAdi());
    }                                         
   public boolean CheckGameIsFinish()
    {       
     for(Game.Pokemon poke: CommonCards)
        {
            if(poke.getKartKullanildimi() == false)
            {
                return false;
            }
        }       
        for(Game.Pokemon poke: Gamer1.getKartList())
        {
            if(poke.getKartKullanildimi() == false)
            {
                return false;
            }
        }
          return true;
    }
     */

 /*bu method 1. oyuncuya random kart seçtirecek common olanlar dahil seçim sonrası 2. oyuncuya kart seçtirilecek
      bu ikincinin seçim metodunu çağıracak ikinci karşılaştırma ve puan atama yapacak
      ikinci en son tekrar bu metodu çağıracak eğer hala kullanılmamış kart var ise  */
    public void Computer1Play() {
        if (RoundF < 5) {
            boolean isGamer1Empty = true;
            for (Game.Pokemon poke : Gamer1.getKartList()) {
                if (poke.getKartKullanildimi() == false) {
                    isGamer1Empty = false;
                    break;
                }
            }

            Game.Pokemon pokemon = null;
            Game.Bilgisayar cpu = null;
            if (!isGamer1Empty) {
                pokemon = Gamer1.kartSec(null);
                cpu = (Game.Bilgisayar) Gamer1;
            }

            List<Game.Pokemon> activeCommonCards = new ArrayList();
            for (Game.Pokemon poke : CommonCards) {
                if (poke.getKartKullanildimi() == false) {
                    activeCommonCards.add(poke);
                }
            }
            if (!isGamer1Empty) {
                activeCommonCards.add(pokemon);
            }

            System.out.println(activeCommonCards.size());

            Random rand = new Random();
            int pokeIndex = rand.nextInt(activeCommonCards.size());
            Game.Pokemon pokemonSelected1 = activeCommonCards.get(pokeIndex);

            if (pokemonSelected1 != pokemon) {
                if (jButton16.getToolTipText() == "99" || jButton9.getToolTipText() == "99") {
                    if (jButton16.getToolTipText() == "99") {

                        jButton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + pokemonSelected1.getPokemonAdi() + ".jpg")));
                        jButton16.setToolTipText("" + pokeIndex);
                        jButton16.setEnabled(false);
                    } else {

                        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + pokemonSelected1.getPokemonAdi() + ".jpg")));
                        jButton9.setToolTipText("" + pokeIndex);
                        jButton9.setEnabled(false);
                    }

                    jButton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + pokemonSelected1.getPokemonAdi() + ".jpg")));
                    jButton18.setToolTipText("" + pokeIndex);

                    int commonIndex = 0;
                    for (Game.Pokemon poke : CommonCards) {
                        if (poke.getPokemonID() == pokemonSelected1.getPokemonID()) {
                            break;
                        }
                        commonIndex++;
                    }
                    CommonCards.get(commonIndex).setKartKullanildimi(true);

                    Computer2PlayAfterCommon(commonIndex);
                    DisableCommonCard(CommonCards.get(commonIndex).getPokemonAdi());
                } else {
                    pokemonSelected1 = pokemon;
                    Gamer1.getKartList().get(cpu._lastCardIndex).setKartKullanildimi(true);

                    jButton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(cpu._lastCardIndex).getPokemonAdi() + ".jpg")));
                    jButton18.setToolTipText("" + cpu._lastCardIndex);
                    Computer2Play(cpu._lastCardIndex);
                    ShowIconGamer1Card(Gamer1.getKartList().get(cpu._lastCardIndex).getPokemonAdi());
                }
            } else {
                SetRightArenaText(pokemon, cpu._lastCardIndex);
                Gamer1.getKartList().get(cpu._lastCardIndex).setKartKullanildimi(true);

                jButton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(cpu._lastCardIndex).getPokemonAdi() + ".jpg")));
                jButton18.setToolTipText("" + cpu._lastCardIndex);
                Computer2Play(cpu._lastCardIndex);
                ShowIconGamer1Card(Gamer1.getKartList().get(cpu._lastCardIndex).getPokemonAdi());
            }
        } else {
            jButton1.setEnabled(false);
            jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(0).getPokemonAdi() + ".jpg")));
            jButton15.setEnabled(false);
            jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(1).getPokemonAdi() + ".jpg")));
            jButton17.setEnabled(false);
            jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(2).getPokemonAdi() + ".jpg")));
            jButton10.setEnabled(false);
            jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(0).getPokemonAdi() + ".jpg")));
            jButton8.setEnabled(false);
            jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(1).getPokemonAdi() + ".jpg")));
            jButton11.setEnabled(false);
            jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(2).getPokemonAdi() + ".jpg")));
            jButton12.setEnabled(false);
            jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(3).getPokemonAdi() + ".jpg")));

            PrintResult();
        }
    }

    public void PrintResult() {
        if (Oyuncu1Skor > Oyuncu2Skor) {
            JOptionPane.showMessageDialog(null, "Oyun sona erdi. Kazanan Oyuncu 1 !", "Oyuncu 1 Kazandı !", 1);
            jTextArea1.append("Oyun sona erdi. Kazanan Oyuncu 1 !");
        } else if (Oyuncu1Skor < Oyuncu2Skor) {
            JOptionPane.showMessageDialog(null, "Oyun sona erdi. Kazanan Oyuncu 2 !", "Oyuncu 2 Kazandı !", 1);
            jTextArea1.append("Oyun sona erdi. Kazanan Oyuncu 2 !");
        } else {
            JOptionPane.showMessageDialog(null, "Oyun sona erdi. Oyun Berabere Bitti !", "Dostluk Kazandı !", 1);
            jTextArea1.append("Oyun sona erdi. Oyun Berabere Bitti !");
        }
        jButton24.setVisible(false);
        jButton25.setVisible(false);
        isShowCards.setEnabled(false);
    }

    public void Computer2Play(int gamer1Index) {
        Game.Pokemon pokemon = Gamer2.kartSec(null);
        Game.Bilgisayar cpu = (Game.Bilgisayar) Gamer2;

        List<Game.Pokemon> activeCommonCards = new ArrayList();
        for (Game.Pokemon poke : CommonCards) {
            if (poke.getKartKullanildimi() == false) {
                activeCommonCards.add(poke);
            }
        }
        activeCommonCards.add(pokemon);

        Random rand = new Random();
        int pokeIndex = rand.nextInt(activeCommonCards.size());
        Game.Pokemon pokemonSelected1 = activeCommonCards.get(pokeIndex);

        if (pokemonSelected1 != pokemon) {
            if (jButton21.getToolTipText() == "99" || jButton23.getToolTipText() == "99") {
                if (jButton21.getToolTipText() == "99") {

                    jButton21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + pokemonSelected1.getPokemonAdi() + ".jpg")));
                    jButton21.setToolTipText("" + pokeIndex);
                    jButton21.setEnabled(false);
                } else {

                    jButton23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + pokemonSelected1.getPokemonAdi() + ".jpg")));
                    jButton23.setToolTipText("" + pokeIndex);
                    jButton23.setEnabled(false);
                }

                int commonIndex = 0;
                for (Game.Pokemon poke : CommonCards) {
                    if (poke.getPokemonID() == pokemonSelected1.getPokemonID()) {
                        break;
                    }
                    commonIndex++;
                }
                CommonCards.get(commonIndex).setKartKullanildimi(true);

                DisableCommonCard(CommonCards.get(commonIndex).getPokemonAdi());
            } else {
                pokemon.setKartKullanildimi(true);

                pokemonSelected1 = pokemon;
                pokemonSelected1.setKartKullanildimi(true);

                SetRightArenaText(pokemon, cpu._lastCardIndex);
                ShowIconGamer2Card(pokemonSelected1.getPokemonAdi());
            }
        } else {
            pokemon.setKartKullanildimi(true);

            pokemonSelected1 = pokemon;
            pokemonSelected1.setKartKullanildimi(true);

            SetRightArenaText(pokemon, cpu._lastCardIndex);
            ShowIconGamer2Card(pokemonSelected1.getPokemonAdi());
        }

        jTextArea1.append("Oyuncu 1 : " + Gamer1.getKartList().get(gamer1Index).getPokemonAdi() + " : " + Gamer1.getKartList().get(gamer1Index).hasarPuaniGoster() + " vs ");
        jTextArea1.append("Oyuncu 2 : " + pokemonSelected1.getPokemonAdi() + " : " + pokemonSelected1.hasarPuaniGoster());
        RoundF++;

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + pokemonSelected1.getPokemonAdi() + ".jpg")));
        jButton2.setToolTipText("" + pokeIndex);

        if (Gamer1.getKartList().get(gamer1Index).hasarPuaniGoster() > pokemonSelected1.hasarPuaniGoster()) {
            jTextArea1.append(" Kazanan OYUNCU 1 \n");
            JOptionPane.showMessageDialog(null, Gamer1.getKartList().get(gamer1Index).getPokemonAdi() + " Kazandı", " ", 1);
            this.Oyuncu1Skor+=5;
        } else if (Gamer1.getKartList().get(gamer1Index).hasarPuaniGoster() < pokemonSelected1.hasarPuaniGoster()) {
            jTextArea1.append(" Kazanan OYUNCU 2 \n");
            JOptionPane.showMessageDialog(null, pokemonSelected1.getPokemonAdi() + " Kazandı", " ", 1);
            this.Oyuncu2Skor+=5;
        } else {
            jTextArea1.append(" BERABERE \n");
            JOptionPane.showMessageDialog(null, " Berabere", " ", 1);
            this.Oyuncu1Skor+=5;
            this.Oyuncu2Skor+=5;
        }
        jButton24.setVisible(false);
        jButton25.setVisible(false);
        jLabel9.setText("Skor : " + this.Oyuncu1Skor);
        jLabel10.setText("Skor : " + this.Oyuncu2Skor);
        if (Gamer1.getOyuncuId() == 2) {
            Computer1Play();
        } else {
            if (RoundF > 4) {
                PrintResult();
            }
        }
    }

    public void Computer2PlayAfterCommon(int gamer1Index) {
        Game.Pokemon pokemon = Gamer2.kartSec(null);
        Game.Bilgisayar cpu = (Game.Bilgisayar) Gamer2;

        List<Game.Pokemon> activeCommonCards = new ArrayList();
        for (Game.Pokemon poke : CommonCards) {
            if (poke.getKartKullanildimi() == false) {
                activeCommonCards.add(poke);
            }
        }
        activeCommonCards.add(pokemon);

        Random rand = new Random();
        int pokeIndex = rand.nextInt(activeCommonCards.size());
        Game.Pokemon pokemonSelected1 = activeCommonCards.get(pokeIndex);

        if (pokemonSelected1 != pokemon) {
            if (jButton21.getToolTipText() == "99" || jButton23.getToolTipText() == "99") {
                if (jButton21.getToolTipText() == "99") {

                    jButton21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + pokemonSelected1.getPokemonAdi() + ".jpg")));

                    jButton21.setToolTipText("" + pokeIndex);
                    jButton21.setEnabled(false);
                } else {

                    jButton23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + pokemonSelected1.getPokemonAdi() + ".jpg")));
                    jButton23.setToolTipText("" + pokeIndex);
                    jButton23.setEnabled(false);
                }

                int commonIndex = 0;
                for (Game.Pokemon poke : CommonCards) {
                    if (poke.getPokemonID() == pokemonSelected1.getPokemonID()) {
                        break;
                    }
                    commonIndex++;
                }
                CommonCards.get(commonIndex).setKartKullanildimi(true);

                DisableCommonCard(CommonCards.get(commonIndex).getPokemonAdi());
            } else {
                pokemon.setKartKullanildimi(true);

                pokemonSelected1 = pokemon;
                pokemonSelected1.setKartKullanildimi(true);

                SetRightArenaText(pokemon, cpu._lastCardIndex);
                ShowIconGamer2Card(pokemonSelected1.getPokemonAdi());
            }
        } else {
            pokemon.setKartKullanildimi(true);

            pokemonSelected1 = pokemon;
            pokemonSelected1.setKartKullanildimi(true);

            SetRightArenaText(pokemon, cpu._lastCardIndex);
            ShowIconGamer2Card(pokemonSelected1.getPokemonAdi());
        }

        jTextArea1.append("Oyuncu 1 : " + CommonCards.get(gamer1Index).getPokemonAdi() + " : " + CommonCards.get(gamer1Index).hasarPuaniGoster() + " vs ");
        jTextArea1.append("Oyuncu 2 : " + pokemonSelected1.getPokemonAdi() + " : " + pokemonSelected1.hasarPuaniGoster());

        RoundF++;

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + pokemonSelected1.getPokemonAdi() + ".jpg")));
        jButton2.setToolTipText("" + pokeIndex);

        if (CommonCards.get(gamer1Index).hasarPuaniGoster() > pokemonSelected1.hasarPuaniGoster()) {
            jTextArea1.append(" Kazanan OYUNCU 1 \n");
            this.Oyuncu1Skor+=5;
            JOptionPane.showMessageDialog(null, CommonCards.get(gamer1Index).getPokemonAdi() + " Kazandı", " ", 1);
        } else if (CommonCards.get(gamer1Index).hasarPuaniGoster() < pokemonSelected1.hasarPuaniGoster()) {
            jTextArea1.append(" Kazanan OYUNCU 2 \n");
            JOptionPane.showMessageDialog(null, pokemonSelected1.getPokemonAdi() + " Kazandı", " ", 1);
            this.Oyuncu2Skor+=5;
        } else {
            jTextArea1.append(" BERABERE \n");
            JOptionPane.showMessageDialog(null, " Berabere", " ", 1);
            this.Oyuncu1Skor+=5;
            this.Oyuncu2Skor+=5;
        }

        jButton24.setVisible(false);
        jButton25.setVisible(false);
        jLabel9.setText("Skor : " + this.Oyuncu1Skor);
        jLabel10.setText("Skor : " + this.Oyuncu2Skor);
        if (Gamer1.getOyuncuId() == 2) {
            Computer1Play();
        } else {
            if (RoundF > 4) {
                PrintResult();
            }
        }
    }

    public void DisableCommonCard(String CardName) {
        int commonIndex = 0;
        for (Pokemon poke : CommonCards) {
            if (CardName == poke.getPokemonAdi()) {
                break;
            }

            commonIndex++;
        }

        switch (commonIndex) {
            case 0:
                jButton10.setEnabled(false);
                jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(0).getPokemonAdi() + ".jpg")));
                break;
            case 1:
                jButton8.setEnabled(false);
                jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(1).getPokemonAdi() + ".jpg")));
                break;
            case 2:
                jButton11.setEnabled(false);
                jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(2).getPokemonAdi() + ".jpg")));
                break;
            case 3:
                jButton12.setEnabled(false);
                jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(3).getPokemonAdi() + ".jpg")));
                break;
            default:
                break;
        }
    }

    public void ShowIconGamer1Card(String CardName) {
        int commonIndex = 0;
        for (Pokemon poke : Gamer1.getKartList()) {
            if (CardName == poke.getPokemonAdi()) {
                break;
            }

            commonIndex++;
        }

        switch (commonIndex) {
            case 0:
                jButton1.setEnabled(false);
                jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(0).getPokemonAdi() + ".jpg")));
                break;
            case 1:
                jButton15.setEnabled(false);
                jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(1).getPokemonAdi() + ".jpg")));
                break;
            case 2:
                jButton17.setEnabled(false);
                jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(2).getPokemonAdi() + ".jpg")));
                break;
            default:
                break;
        }
    }

    public void ShowIconGamer2Card(String CardName) {
        int commonIndex = 0;
        for (Pokemon poke : Gamer2.getKartList()) {
            if (CardName == poke.getPokemonAdi()) {
                break;
            }

            commonIndex++;
        }

        switch (commonIndex) {
            case 0:
                jButton19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer2.getKartList().get(0).getPokemonAdi() + ".jpg")));
                break;
            case 1:
                jButton20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer2.getKartList().get(1).getPokemonAdi() + ".jpg")));
                break;
            case 2:
                jButton22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer2.getKartList().get(2).getPokemonAdi() + ".jpg")));
                break;
            default:
                break;
        }
    }

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {                                          

        if (Roundc == 0 && Roundp == 0) {
            jButton24.setVisible(true);
            jButton25.setVisible(true);
            jButton17.setEnabled(false);
            SetLeftArenaText(Gamer1.getKartList().get(2), 2);
            Gamer1.getKartList().get(2).setKartKullanildimi(true);

            Computer2Play(2);

            Roundp++;
        } else if (Roundc == 1 && Roundp == 1) {
            jButton24.setVisible(true);
            jButton25.setVisible(true);
            jButton17.setEnabled(false);
            SetLeftArenaText(Gamer1.getKartList().get(2), 2);
            Gamer1.getKartList().get(2).setKartKullanildimi(true);

            Computer2Play(2);

            Roundp++;
        } else if (Roundc == 2 && Roundp == 2) {
            jButton24.setVisible(true);
            jButton25.setVisible(true);
            jButton17.setEnabled(false);
            SetLeftArenaText(Gamer1.getKartList().get(2), 2);
            Gamer1.getKartList().get(2).setKartKullanildimi(true);

            Computer2Play(2);

            Roundc++;
        } else if (Roundc < 5 && Roundc > 2 && Roundp == 2) {
            jButton24.setVisible(true);
            jButton25.setVisible(true);
            jButton17.setEnabled(false);
            SetLeftArenaText(Gamer1.getKartList().get(2), 2);
            Gamer1.getKartList().get(2).setKartKullanildimi(true);

            Computer2Play(2);

            Roundc++;

        } else {
            JOptionPane.showMessageDialog(null, "Öncelikle Ortadan Kart Seçmelisiniz", "Uyarı !", 1);
        }


    }                                         

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {                                          

    }                                         

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {                                          

    }                                         

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {                                          

    }                                         

    private void formWindowOpened(java.awt.event.WindowEvent evt) {                                  
        jTextArea1.setBackground(new Color(255, 255, 255, 100));

        CreateAllCards();

        jButton24.setVisible(false);
        jButton25.setVisible(false);
        if (Selection.getSelectedGameType() == 2) {
            // Bilgisayar vs Bilgisayar ise
            Gamer1 = new Game.Bilgisayar();
            Gamer2 = new Game.Bilgisayar();
            AssignCards();
            jLabel1.setText("Oyuncu 1 : Bilgisayar");
            jLabel2.setText("Oyuncu 2 : Bilgisayar");

            ShowHideScreen(true);
            ResetScreen();
            ShowHideCards(true);
            Computer1Play();
        } else {
            Gamer1 = new Game.Kullanici();
            Gamer2 = new Game.Bilgisayar();
            AssignCards();
            jLabel1.setText("Oyuncu 1 : Kullanıcı");
            jLabel2.setText("Oyuncu 2 : Bilgisayar");

            ShowHideScreen(true);
            ResetScreen();
        }
    }                                 

    public void ShowHideScreen(boolean stat) {
        jLabel1.setVisible(stat);
        jLabel2.setVisible(stat);
        jLabel9.setVisible(stat);
        jLabel10.setVisible(stat);
        jTextArea1.setVisible(stat);
    }

    public void ResetScreen() {
        jButton1.setEnabled(true);
        jButton2.setEnabled(true);
        jButton8.setEnabled(true);
        jButton9.setEnabled(true);
        jButton10.setEnabled(true);
        jButton11.setEnabled(true);
        jButton12.setEnabled(true);

        jButton15.setEnabled(true);
        jButton16.setEnabled(true);
        jButton17.setEnabled(true);
        jButton18.setEnabled(true);
        jButton19.setEnabled(true);
        jButton20.setEnabled(true);
        jButton21.setEnabled(true);
        jButton22.setEnabled(true);
        jButton23.setEnabled(true);
        jButton16.setToolTipText("99");
        jButton9.setToolTipText("99");
        jButton21.setToolTipText("99");
        jButton23.setToolTipText("99");
    }

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {                                          

        if (Roundp == 0) {
            JOptionPane.showMessageDialog(null, "Kart Çekebilmek İçin Öncelikle Destenizden Bir Kart Oynamanız Gerekli", "Uyarı !", 1);
        } else if (Roundp == 1 && Roundc == 0) {
            GetFromDeck(jButton10, 0);
            Roundc++;
        } else if (Roundp == 2 && Roundc == 1) {
            GetFromDeck(jButton10, 0);
            Roundc++;
        } else {
            JOptionPane.showMessageDialog(null, "Kart Çekebilmek İçin Öncelikle Destenizden Bir Kart Oynamanız Gerekli", "Uyarı !", 1);
        }


    }                                         

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {                                         

        if (Roundp == 0) {
            JOptionPane.showMessageDialog(null, "Kart Çekebilmek İçin Öncelikle Destenizden Bir Kart Oynamanız Gerekli", "Uyarı !", 1);
        } else if (Roundp == 1 && Roundc == 0) {
            GetFromDeck(jButton8, 1);
            Roundc++;
        } else if (Roundp == 2 && Roundc == 1) {
            GetFromDeck(jButton8, 1);
            Roundc++;
        } else {
            JOptionPane.showMessageDialog(null, "Kart Çekebilmek İçin Öncelikle Destenizden Bir Kart Oynamanız Gerekli", "Uyarı !", 1);
        }


    }                                        

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {                                          

        if (Roundp == 0) {
            JOptionPane.showMessageDialog(null, "Kart Çekebilmek İçin Öncelikle Destenizden Bir Kart Oynamanız Gerekli", "Uyarı !", 1);
        } else if (Roundp == 1 && Roundc == 0) {
            GetFromDeck(jButton11, 2);
            Roundc++;
        } else if (Roundp == 2 && Roundc == 1) {
            GetFromDeck(jButton11, 2);
            Roundc++;
        } else {
            JOptionPane.showMessageDialog(null, "Kart Çekebilmek İçin Öncelikle Destenizden Bir Kart Oynamanız Gerekli", "Uyarı !", 1);
        }


    }                                         

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {                                          

        if (Roundp == 0) {
            JOptionPane.showMessageDialog(null, "Kart Çekebilmek İçin Öncelikle Destenizden Bir Kart Oynamanız Gerekli", "Uyarı !", 1);
        } else if (Roundp == 1 && Roundc == 0) {
            GetFromDeck(jButton12, 3);
            Roundc++;
        } else if (Roundp == 2 && Roundc == 1) {
            GetFromDeck(jButton12, 3);
            Roundc++;
        } else {
            JOptionPane.showMessageDialog(null, "Kart Çekebilmek İçin Öncelikle Destenizden Bir Kart Oynamanız Gerekli", "Uyarı !", 1);
        }

    }                                         

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {                                          

    }                                         

    private void isShowCardsActionPerformed(java.awt.event.ActionEvent evt) {                                            
        ShowHideCards(isShowCards.isSelected());
    }                                           

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {                                         

        if (Roundp > 1) {

            if (Roundc == 0 && Roundp == 0) {
                jButton24.setVisible(true);
                jButton25.setVisible(true);
                jButton9.setEnabled(false);
                SetLeftArenaText(CommonCards.get(kart2), 1);

                CommonCards.get(kart2).setKartKullanildimi(true);

                Computer2PlayAfterCommon(kart2);

                Roundp++;
            } else if (Roundc == 1 && Roundp == 1) {
                jButton24.setVisible(true);
                jButton25.setVisible(true);
                jButton9.setEnabled(false);
                SetLeftArenaText(CommonCards.get(kart2), 1);

                CommonCards.get(kart2).setKartKullanildimi(true);

                Computer2PlayAfterCommon(kart2);

                Roundp++;
            } else if (Roundc == 2 && Roundp == 2) {
                jButton24.setVisible(true);
                jButton25.setVisible(true);
                jButton9.setEnabled(false);
                SetLeftArenaText(CommonCards.get(kart2), 1);

                CommonCards.get(kart2).setKartKullanildimi(true);

                Computer2PlayAfterCommon(kart2);

                Roundc++;
            } else if (Roundc < 5 && Roundc > 2 && Roundp == 2) {
                jButton24.setVisible(true);
                jButton25.setVisible(true);
                jButton9.setEnabled(false);
                SetLeftArenaText(CommonCards.get(kart2), 1);

                CommonCards.get(kart2).setKartKullanildimi(true);

                Computer2PlayAfterCommon(kart2);

                Roundc++;
            } else {
                JOptionPane.showMessageDialog(null, "Öncelikle Ortadan Kart Seçmelisiniz", "Uyarı !", 1);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Öncelikle Ortadan Kart Seçmelisiniz", "Uyarı !", 1);
        }


    }                                        

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {                                     

        this.setVisible(false);

        ResetScreen();
        MainMenu Mn = new MainMenu();
        Mn.setVisible(true);

    }                                    

    public void GetFromDeck(javax.swing.JButton clickedButton, int index) {
        if (CommonCards.get(index).getKartKullanildimi() == false) {
            if (jButton16.getToolTipText() == "99" || jButton9.getToolTipText() == "99") {
                clickedButton.setEnabled(false);
                if (jButton16.getToolTipText() == "99") {
                    // jButton16.setText("<html>" + CommonCards.get(index).getPokemonAdi() + "<br /><br />" + "Güç : " + CommonCards.get(index).hasarPuaniGoster() + "</html>");
                    jButton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(index).getPokemonAdi() + ".jpg")));
                    jButton16.setToolTipText("" + index);
                    clickedButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(index).getPokemonAdi() + ".jpg")));
                    kart1 = index;

                } else {
                    //jButton9.setText("<html>" + CommonCards.get(index).getPokemonAdi() + "<br /><br />" + "Güç : " + CommonCards.get(index).hasarPuaniGoster() + "</html>");
                    jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(index).getPokemonAdi() + ".jpg")));
                    jButton9.setToolTipText("" + index);
                    clickedButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(index).getPokemonAdi() + ".jpg")));
                    kart2 = index;

                }
                CommonCards.get(index).setKartKullanildimi(true);
                DisableCommonCard(CommonCards.get(index).getPokemonAdi());

                /* jButton18.setText("<html>" + CommonCards.get(index).getPokemonAdi() + "<br /><br />" + "Güç : " + CommonCards.get(index).hasarPuaniGoster() + "</html>");
                   jButton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/"+CommonCards.get(index).getPokemonAdi()+".jpg"))); 
                   jButton18.setToolTipText(""+index);
                   CommonCards.get(index).setKartOynandimi(true);
                   Computer2PlayAfterCommon(index);
                 */
            } else {
                JOptionPane.showMessageDialog(null, "Ortadan En Fazla 2 Kart Alınabilir. Başka Kart Alamazsınız !", "Uyarı !", 1);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Bu kart daha önce kullanılmıştır alınamaz !", "Uyarı !", 1);
        }
    }

    public void SelectCommonCard(javax.swing.JButton clickedButton, int index) {
        if (CommonCards.get(index).getKartKullanildimi() == false) {
            if (jButton16.getToolTipText() == "99" || jButton9.getToolTipText() == "99") {
                clickedButton.setEnabled(false);
                if (jButton16.getToolTipText() == "99") {

                    jButton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(index).getPokemonAdi() + ".jpg")));

                    jButton16.setToolTipText("" + index);
                    jButton16.setEnabled(false);

                } else {

                    jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(index).getPokemonAdi() + ".jpg")));
                    jButton9.setToolTipText("" + index);
                    jButton9.setEnabled(false);
                }

                jButton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(index).getPokemonAdi() + ".jpg")));
                jButton18.setToolTipText("" + index);

                CommonCards.get(index).setKartKullanildimi(true);

                Computer2PlayAfterCommon(index);
                DisableCommonCard(CommonCards.get(index).getPokemonAdi());
            } else {
                JOptionPane.showMessageDialog(null, "Ortadan En Fazla 2 Kart Alınabilir. Başka Kart Alamazsınız !", "Uyarı !", 1);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Bu kart daha önce kullanılmıştır alınamaz !", "Uyarı !", 1);
        }
    }

    private static Game.Pokemon pokemonCards[] = new Game.Pokemon[10];
    private static List<Game.Pokemon> CommonCards = new ArrayList();
    private static Game.Oyuncu Gamer1;
    private static Game.Oyuncu Gamer2;
    private int Oyuncu1Skor = 0;
    private int Oyuncu2Skor = 0;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameBoard().setVisible(true);
            }
        });

    }

    private static void CreateAllCards() {
        pokemonCards[0] = (new Pokemons.Bulbasaur());
        pokemonCards[1] = (new Pokemons.Butterfree());
        pokemonCards[2] = (new Pokemons.Charmander());
        pokemonCards[3] = (new Pokemons.Jigglypuff());
        pokemonCards[4] = (new Pokemons.Meowth());
        pokemonCards[5] = (new Pokemons.Pikachu());
        pokemonCards[6] = (new Pokemons.Psyduck());
        pokemonCards[7] = (new Pokemons.Snorlax());
        pokemonCards[8] = (new Pokemons.Squirtle());
        pokemonCards[9] = (new Pokemons.Zubat());
    }

    public void ShowHideCards(boolean isShow) {
        if (isShow) {
            jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(0).getPokemonAdi() + ".jpg")));
            jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(1).getPokemonAdi() + ".jpg")));
            jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(2).getPokemonAdi() + ".jpg")));

            jButton19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer2.getKartList().get(0).getPokemonAdi() + ".jpg")));
            jButton20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer2.getKartList().get(1).getPokemonAdi() + ".jpg")));
            jButton22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer2.getKartList().get(2).getPokemonAdi() + ".jpg")));

            jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(0).getPokemonAdi() + ".jpg")));
            jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(1).getPokemonAdi() + ".jpg")));
            jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(2).getPokemonAdi() + ".jpg")));
            jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + CommonCards.get(3).getPokemonAdi() + ".jpg")));
        } else {
            jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(0).getPokemonAdi() + ".jpg")));
            jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(1).getPokemonAdi() + ".jpg")));
            jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(2).getPokemonAdi() + ".jpg")));

            jButton19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/closedcard.png")));
            jButton20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/closedcard.png")));
            jButton22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/closedcard.png")));

            jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/closedcard.png")));
            jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/closedcard.png")));
            jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/closedcard.png")));
            jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/closedcard.png")));
        }
    }

    private void AssignCards() {
        CommonCards = new ArrayList();
        List<Integer> cardIndex = new ArrayList();
        cardIndex.add(0);
        cardIndex.add(1);
        cardIndex.add(2);
        cardIndex.add(3);
        cardIndex.add(4);
        cardIndex.add(5);
        cardIndex.add(6);
        cardIndex.add(7);
        cardIndex.add(8);
        cardIndex.add(9);

        Random rand = new Random();
        int random1, random2, random3, random4, random5, random6;

        random1 = rand.nextInt(10);
        do {
            random2 = rand.nextInt(10);
        } while (random1 == random2);
        do {
            random3 = rand.nextInt(10);
        } while (random3 == random1 || random3 == random2);
        do {
            random4 = rand.nextInt(10);
        } while (random4 == random1 || random4 == random2 || random4 == random3);
        do {
            random5 = rand.nextInt(10);
        } while (random5 == random1 || random5 == random2 || random5 == random3 || random5 == random4);
        do {
            random6 = rand.nextInt(10);
        } while (random6 == random1 || random6 == random2 || random6 == random3 || random6 == random4 || random6 == random5);

        Gamer1.listeyeKartEkle(pokemonCards[random1]);
        cardIndex.remove((Integer) random1);
        Gamer1.listeyeKartEkle(pokemonCards[random2]);
        cardIndex.remove((Integer) random2);
        Gamer1.listeyeKartEkle(pokemonCards[random3]);
        cardIndex.remove((Integer) random3);

        Gamer2.listeyeKartEkle(pokemonCards[random4]);
        cardIndex.remove((Integer) random4);
        Gamer2.listeyeKartEkle(pokemonCards[random5]);
        cardIndex.remove((Integer) random5);
        Gamer2.listeyeKartEkle(pokemonCards[random6]);
        cardIndex.remove((Integer) random6);

        for (int i : cardIndex) {
            CommonCards.add(pokemonCards[i]);
        }

        for (Game.Pokemon poke : Gamer1.getKartList()) {
            System.out.println("Gamer 1 pokemon : " + poke.getPokemonAdi());
        }

        for (Game.Pokemon poke : Gamer2.getKartList()) {
            System.out.println("Gamer 2 pokemon : " + poke.getPokemonAdi());
        }

        for (Game.Pokemon poke : CommonCards) {
            System.out.println("Ortadaki pokemon : " + poke.getPokemonAdi());
        }

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(0).getPokemonAdi() + ".jpg")));
        jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(1).getPokemonAdi() + ".jpg")));
        jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/" + Gamer1.getKartList().get(2).getPokemonAdi() + ".jpg")));

        jButton19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/closedcard.png")));
        jButton20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/closedcard.png")));
        jButton22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/closedcard.png")));

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/closedcard.png")));
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/closedcard.png")));
        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/closedcard.png")));
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/closedcard.png")));
    }

    // Variables declaration - do not modify                     
    private javax.swing.JCheckBox isShowCards;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration                   
}
package Game;

import Game.Oyuncu;
import Game.Pokemon;


public class Kullanici extends Oyuncu {

    private Pokemon _seciliPokemon;

    public void setSeciliPokemon(Pokemon pokemon) {
        this._seciliPokemon = pokemon;
    }

    public Pokemon getSeciliPokemon() {
        return this._seciliPokemon;
    }

    public Kullanici() {
        super(1, "Kullanici 1", 0);
    }

    public Kullanici(int oyuncuId, String oyuncuAdi, int skor) {
        super(oyuncuId, oyuncuAdi, skor);
    }

    @Override
    Pokemon kartSec(Pokemon selectedCard) {

        return selectedCard;
    }
}

package Game;

import javax.swing.JOptionPane;
import java.util.Timer;
import java.util.TimerTask;


public class MainMenu extends javax.swing.JFrame {

    public MainMenu() {
        initComponents();
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        BtnComp = new javax.swing.JLabel();
        ImageLogo = new javax.swing.JLabel();
        BtnPlyr = new javax.swing.JLabel();
        Gifground = new javax.swing.JLabel();
        Background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(980, 580));
        setResizable(false);
        setSize(new java.awt.Dimension(980, 580));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        BtnComp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/btnCompVsComp.png"))); // NOI18N
        BtnComp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnCompMouseClicked(evt);
            }
        });
        getContentPane().add(BtnComp);
        BtnComp.setBounds(300, 390, 380, 100);

        ImageLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Logo.png"))); // NOI18N
        ImageLogo.setMaximumSize(new java.awt.Dimension(1000, 736));
        ImageLogo.setMinimumSize(new java.awt.Dimension(1000, 736));
        getContentPane().add(ImageLogo);
        ImageLogo.setBounds(190, 20, 630, 210);

        BtnPlyr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/btnPlayerVsComp.png"))); // NOI18N
        BtnPlyr.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnPlyrMouseClicked(evt);
            }
        });
        getContentPane().add(BtnPlyr);
        BtnPlyr.setBounds(300, 270, 380, 100);

        Gifground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/starting.gif"))); // NOI18N
        Gifground.setMaximumSize(new java.awt.Dimension(1200, 800));
        Gifground.setMinimumSize(new java.awt.Dimension(1200, 800));
        Gifground.setPreferredSize(new java.awt.Dimension(1200, 800));
        Gifground.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GifgroundMouseClicked(evt);
            }
        });
        getContentPane().add(Gifground);
        Gifground.setBounds(0, 0, 960, 540);
        Gifground.getAccessibleContext().setAccessibleName("btnpc");

        Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/background.jpg"))); // NOI18N
        Background.setMaximumSize(new java.awt.Dimension(1200, 800));
        Background.setMinimumSize(new java.awt.Dimension(1200, 800));
        Background.setPreferredSize(new java.awt.Dimension(1200, 800));
        getContentPane().add(Background);
        Background.setBounds(0, 0, 960, 540);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void BtnPlyrMouseClicked(java.awt.event.MouseEvent evt) {                                     

        
      Selection st = new Selection();
      
      st.setSelectedGameType(1);
      
        
        this.setVisible(false);
        
    
    GameBoard Gb = new GameBoard();
      Gb.setVisible(true);
     


    }                                    

    private void formWindowOpened(java.awt.event.WindowEvent evt) {                                  

        BtnComp.setVisible(false);
        BtnPlyr.setVisible(false);
        ImageLogo.setVisible(false);

        gizleme(0);


    }                                 

    private void GifgroundMouseClicked(java.awt.event.MouseEvent evt) {                                       
                     
            
                   
                    Gifground.setVisible(false);
                    BtnComp.setVisible(true);
                    BtnPlyr.setVisible(true);
                    ImageLogo.setVisible(true);   
                
                     gizleme(1);
                     
    }                                      

    private void BtnCompMouseClicked(java.awt.event.MouseEvent evt) {                                     


      Selection st = new Selection();
      
      st.setSelectedGameType(2);
      
        
        this.setVisible(false);
      GameBoard GB = new GameBoard();
        GB.setVisible(true);



     
    }                                    

    public void gizleme(int x) {
        Timer myTimer = new Timer();
        TimerTask gorev = new TimerTask() {

            @Override
            public void run() {
if(x==1)
{
 myTimer.cancel();
 sayac = 0;
}
                sayac++;
                if (sayac == 2) {
                    myTimer.cancel();
                    Gifground.setVisible(false);
                    BtnComp.setVisible(true);
                    BtnPlyr.setVisible(true);
                    ImageLogo.setVisible(true);
                   sayac = 0;
                }
            }

        };

        myTimer.schedule(gorev, 0, 2200);

    }

    static int sayac = 0;

    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel Background;
    private javax.swing.JLabel BtnComp;
    private javax.swing.JLabel BtnPlyr;
    private javax.swing.JLabel Gifground;
    private javax.swing.JLabel ImageLogo;
    // End of variables declaration                   
}


package Game;

import Game.Pokemon;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author lenovo
 */
public abstract class Oyuncu {
    private int _oyuncuID;
    private String _oyuncuAdi;
    private int _skor;
    private List<Pokemon> _kartListesi;
    
    public int getOyuncuId()
    {
        return this._oyuncuID;
    }
    
    public String getOyuncuAdi()
    {
        return this._oyuncuAdi;
    }
    
    public void setOyuncuId(int oyuncuId)
    {
        this._oyuncuID = oyuncuId;
    }
    
    public void setOyuncuAdi(String oyuncuAdi)
    {
        this._oyuncuAdi = oyuncuAdi;
    }
    
    public void setSkor(int skor)
    {
        this._skor = skor;
    }
    
    public List<Pokemon> getKartList()
    {
        return this._kartListesi;
    }
    
    public void listeyeKartEkle(Pokemon kart)
    {
        this._kartListesi.add(kart);
    }
    
    public int SkorGoster()
    {
        return this._skor;
    }
    
    public Oyuncu()
    {
        this._kartListesi = new ArrayList<>();
    }
    
    public Oyuncu(int oyuncuId, String oyuncuAdi, int skor)
    {
        this._oyuncuID = oyuncuId;
        this._oyuncuAdi = oyuncuAdi;
        this._skor = skor;
        this._kartListesi = new ArrayList<>();
    }
    
    abstract Pokemon kartSec(Pokemon selectedCard);
}

package Game;


public class Pokemon {

    private int _pokemonID;
    private String _pokemonAdi;
    private String _pokemonTip;
    private Boolean _kartKullanildimi;

    public void setPokemonID(int id) {
        this._pokemonID = id;
    }

    public int getPokemonID() {
        return this._pokemonID;
    }

    public Boolean getKartKullanildimi() {
        return this._kartKullanildimi;
    }

    public void setKartKullanildimi(Boolean kartKullanildimi) {
        this._kartKullanildimi = kartKullanildimi;
    }

    public String getPokemonAdi() {
        return this._pokemonAdi;
    }

    public String getPokemonTip() {
        return this._pokemonTip;
    }

    public Pokemon() {
        this._pokemonAdi = "Tanimsiz";
        this._pokemonTip = "Tanimsiz";
        this._kartKullanildimi = false;

        this._pokemonID = 1;
    }

    public Pokemon(String pokemonAdi, String pokemonTip, int pokemonId) {
        this._pokemonID = pokemonId;
        this._pokemonAdi = pokemonAdi;
        this._pokemonTip = pokemonTip;
        this._kartKullanildimi = false;

    }

    public int hasarPuaniGoster() {
        return 0;
    }
}

package Game;

public class Selection {

    public static int MenuSelection;

    public void setSelectedGameType(int x) {

        MenuSelection = x;

    }

    public static int getSelectedGameType() {

        return MenuSelection;

    }

}

package Pokemons;


public class Bulbasaur extends Game.Pokemon {

    private int _hasarPuani;

    public Bulbasaur() {
        super("Bulbasaur", "Çim", 1);
        this._hasarPuani = 50;
    }

    public Bulbasaur(int hasarPuani) {
        super("Bulbasaur", "Çim", 1);
        this._hasarPuani = hasarPuani;
    }

    @Override
    public int hasarPuaniGoster() {
        return this._hasarPuani;
    }
}
package Pokemons;

public class Butterfree extends Game.Pokemon {

    private int _hasarPuani;

    public Butterfree() {
        super("Butterfree", "Hava", 2);
        this._hasarPuani = 10;
    }

    public Butterfree(int hasarPuani) {
        super("Butterfree", "Hava", 2);
        this._hasarPuani = hasarPuani;
    }

    @Override
    public int hasarPuaniGoster() {
        return this._hasarPuani;
    }
}

package Pokemons;

public class Charmander extends Game.Pokemon {

    private int _hasarPuani;

    public Charmander() {
        super("Charmander", "Ateş", 3);
        this._hasarPuani = 60;
    }

    public Charmander(int hasarPuani) {
        super("Charmander", "Ateş", 3);
        this._hasarPuani = hasarPuani;
    }

    @Override
    public int hasarPuaniGoster() {
        return this._hasarPuani;
    }
}
package Pokemons;

public class Jigglypuff extends Game.Pokemon {

    private int _hasarPuani;

    public Jigglypuff() {
        super("Jigglypuff", "Ses", 4);
        this._hasarPuani = 70;
    }

    public Jigglypuff(int hasarPuani) {
        super("Jigglypuff", "Ses", 4);
        this._hasarPuani = hasarPuani;
    }

    @Override
    public int hasarPuaniGoster() {
        return this._hasarPuani;
    }
}
package Pokemons;

public class Meowth extends Game.Pokemon {

    private int _hasarPuani;
    private Boolean _kartKullanildimi;

    public Meowth() {
        super("Meowth", "Normal", 5);
        this._hasarPuani = 40;
    }

    public Meowth(int hasarPuani) {
        super("Meowth", "Normal", 5);
        this._hasarPuani = hasarPuani;
    }

    @Override
    public int hasarPuaniGoster() {
        return this._hasarPuani;
    }
}
package Pokemons;

public class Pikachu extends Game.Pokemon {

    private int _hasarPuani;

    public Pikachu() {
        super("Pikachu", "Elektrik", 6);
        this._hasarPuani = 40;
    }

    public Pikachu(int hasarPuani) {
        super("Pikachu", "Elektrik", 6);
        this._hasarPuani = hasarPuani;
    }

    @Override
    public int hasarPuaniGoster() {
        return this._hasarPuani;
    }
}
package Pokemons;

public class Psyduck extends Game.Pokemon {

    private int _hasarPuani;

    public Psyduck() {
        super("Psyduck", "Su", 7);
        this._hasarPuani = 20;
    }

    public Psyduck(int hasarPuani) {
        super("Psyduck", "Su", 7);
        this._hasarPuani = hasarPuani;
    }

    @Override
    public int hasarPuaniGoster() {
        return this._hasarPuani;
    }
}
package Pokemons;

public class Snorlax extends Game.Pokemon {

    private int _hasarPuani;

    public Snorlax() {
        super("Snorlax", "Normal", 8);
        this._hasarPuani = 30;
    }

    public Snorlax(int hasarPuani) {
        super("Snorlax", "Normal", 8);
        this._hasarPuani = hasarPuani;
    }

    @Override
    public int hasarPuaniGoster() {
        return this._hasarPuani;
    }
}
package Pokemons;

public class Squirtle extends Game.Pokemon {

    private int _hasarPuani;

    public Squirtle() {
        super("Squirtle", "Su", 9);
        this._hasarPuani = 30;
    }

    public Squirtle(int hasarPuani) {
        super("Squirtle", "Su", 9);
        this._hasarPuani = hasarPuani;
    }

    @Override
    public int hasarPuaniGoster() {
        return this._hasarPuani;
    }
}
package Pokemons;

public class Zubat extends Game.Pokemon {

    private int _hasarPuani;

    public Zubat() {
        super("Zubat", "Hava", 10);
        this._hasarPuani = 50;
    }

    public Zubat(int hasarPuani) {
        super("Zubat", "Hava", 10);
        this._hasarPuani = hasarPuani;
    }

    @Override
    public int hasarPuaniGoster() {
        return this._hasarPuani;
    }
}
